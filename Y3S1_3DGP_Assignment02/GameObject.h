#pragma once
#include "Mesh.h"

class CShader;
class CCamera;

class CGameObject
{
public:
	CGameObject();
	virtual ~CGameObject();

private:
	int m_nReferences = 0;
public:
	void AddRef() { m_nReferences++; }
	void Release() { if (--m_nReferences <= 0) delete this; }

protected:
	XMFLOAT4X4 m_xmf4x4World;
	CMesh* m_pMesh = NULL;
	CShader* m_pShader = NULL;

public:
	void ReleaseUploadBuffers();

	virtual void SetMesh(CMesh* pMesh);
	virtual void SetShader(CShader* pShader);

	virtual void Animate(float fTimeElapsed);

	virtual void OnPrepareRender();
	virtual void Render(ID3D12GraphicsCommandList* pd3dCommandList, CCamera* pCamera);

public:
	void Rotate(XMFLOAT3* pxmf3Axis, float fAngle);

public:
	//상수 버퍼를 생성한다. 
	virtual void CreateShaderVariables(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList);
	
	//상수 버퍼의 내용을 갱신한다. 
	virtual void UpdateShaderVariables(ID3D12GraphicsCommandList *pd3dCommandList);
	virtual void ReleaseShaderVariables();

	//게임 객체의 월드 변환 행렬에서 위치 벡터와 방향(x-축, y-축, z-축) 벡터를 반환한다.
	XMFLOAT3 GetPosition();
	XMFLOAT3 GetLook() const;
	XMFLOAT3 GetUp();
	XMFLOAT3 GetRight();

	//게임 객체의 위치를 설정한다. 
	void SetPosition(float x, float y, float z);
	void SetPosition(XMFLOAT3 xmf3Position);

	//게임 객체를 로컬 x-축, y-축, z-축 방향으로 이동한다.
	void MoveStrafe(float fDistance = 1.0f);
	void MoveUp(float fDistance = 1.0f);
	void MoveForward(float fDistance = 1.0f);

	//게임 객체를 회전(x-축, y-축, z-축)한다. 
	void Rotate(float fPitch = 10.0f, float fYaw = 10.0f, float fRoll = 10.0f);

	void UpdateBoundingBox()
	{
		m_xmBoundingBox = m_pMesh->GetBoundingBox();
		m_xmBoundingBox.Transform(m_xmBoundingBox, XMLoadFloat4x4(&m_xmf4x4World));
	}

public:
	//게임 객체가 카메라에 보인는 가를 검사한다.
	bool IsVisible(CCamera *pCamera=NULL);

	bool m_bActive = true;

public:
	//모델 좌표계의 픽킹 광선을 생성한다. 
	void GenerateRayForPicking(XMFLOAT3& xmf3PickPosition, XMFLOAT4X4& xmf4x4View,
	XMFLOAT3* pxmf3PickRayOrigin, XMFLOAT3* pxmf3PickRayDirection);

	//카메라 좌표계의 한 점에 대한 모델 좌표계의 픽킹 광선을 생성하고 객체와의 교차를 검사한다. 
	int PickObjectByRayIntersection(XMFLOAT3& xmf3PickPosition, XMFLOAT4X4& xmf4x4View, float* pfHitDistance);

	//메쉬의 바운딩 박스(모델 좌표계)를 생성한다.
	BoundingOrientedBox m_xmBoundingBox;
};


class CRotatingObject : public CGameObject
{
public:
	CRotatingObject();
	virtual ~CRotatingObject();
private:
	XMFLOAT3 m_xmf3RotationAxis;
	float m_fRotationSpeed;
public:
	void SetRotationSpeed(float fRotationSpeed) { m_fRotationSpeed = fRotationSpeed; }
	void SetRotationAxis(XMFLOAT3 xmf3RotationAxis) {
		m_xmf3RotationAxis =
			xmf3RotationAxis;
	}
	virtual void Animate(float fTimeElapsed);
};

class CTankObject : public CGameObject
{
public:
	CTankObject() = default;
	virtual ~CTankObject() = default;

private:
	XMFLOAT3 m_xmf3RotationAxis = { 0, 1, 0 }; // y축 회전
	float m_fRotationSpeed = 0.0f;

	float m_fMoveSpeed = 10.0f;
	float m_fDirectionChangeTime = 0.0f; // 시간 누적
	float m_fDirectionChangeInterval = 1.0f; // 2초마다 방향 변경

	float m_fCurrentYaw = 0.0f;       // 현재 y축 회전 각도 (라디안)
	float m_fTargetYaw = 0.0f;        // 목표 y축 회전 각도 (라디안)
	float m_fRotationLerpSpeed = 2.0f; // 회전 속도 (값이 클수록 빨리 회전)

public:
	void SetRotationSpeed(float fRotationSpeed) { m_fRotationSpeed = fRotationSpeed; }
	void SetRotationAxis(XMFLOAT3 xmf3RotationAxis) { m_xmf3RotationAxis = xmf3RotationAxis; }

	virtual void Animate(float fTimeElapsed) override;
};


class CBulletObject : public CGameObject
{
public:
	CBulletObject();
	virtual ~CBulletObject();
private:
	float bulletSpeed = 100.0f; // 총알 속도

public:
	virtual void Animate(float fTimeElapsed);
public:
	void reset(XMFLOAT3 position, XMFLOAT3 dir);
private:
	XMFLOAT3 lookDir = { 0.0f, 0.0f, 1.0f }; // 플레이어의 Look 벡터 (Z축 방향)
	bool moveable = false; // 총알이 움직일 수 있는 상태인지 여부

	CGameObject* m_pLockedObject = NULL;	// lock 오브젝트
};